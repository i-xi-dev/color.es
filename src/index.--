//

class SrgbColor {


  //TODO

  toCssString(options: SrgbColor.Format.CssOptions = {}): string {
    const omitAlphaMode = options.omitAlpha ? options.omitAlpha : SrgbColor.Format.OmitAlpha.IF_OPAQUE;
    const omitAlpha = (
      (omitAlphaMode === SrgbColor.Format.OmitAlpha.ALWAYS) ||
      ((omitAlphaMode === SrgbColor.Format.OmitAlpha.IF_OPAQUE) && (this.opacity === 1))
    );

    switch (options?.type) {
      case SrgbColor.Format.CssFunction.L4_HSL:
      case SrgbColor.Format.CssFunction.LEGACY_HSL:
        return this.#toCssHslFunction(omitAlpha, options.type);

      default:
        return this.#toCssRgbFunction(omitAlpha, options.type);
    }
  }

  #toCssHslFunction(omitAlpha: boolean, type: SrgbColor.Format.CssFunction = SrgbColor.Format.CssFunction.LEGACY_HSL): string {
    const { h, s, l } = this.toHsl();
    const sp = (s * 100);
    const lp = (l * 100);
    if (type === SrgbColor.Format.CssFunction.L4_HSL) {
      if (omitAlpha === true) {
        return `hsl(${ h }deg ${ sp }% ${ lp }%)`;
      }
      return `hsl(${ h }deg ${ sp }% ${ lp }% / ${ this.opacity })`;
    }
    else /* SrgbColor.Format.CssFunction.LEGACY_HSL */ {
      if (omitAlpha === true) {
        return `hsl(${ h }, ${ sp }%, ${ lp }%)`;
      }
      return `hsl(${ h }, ${ sp }%, ${ lp }%, ${ this.opacity })`;
    }
  }

}

/*
static fromCssString(cssString: string): RgbColor {
  // computed valueを使うならrgb(a)関数以外の値にはならないはず
  if (typeof cssString === "string") {
    const trimmed = cssString.trim().toLowerCase();
    if (trimmed === "transparent") {
      return RgbColor.fromRgb(0, 0, 0); // XXX グラデーションやアニメーションで補完されるときはalpha以外無視する仕様
    }
    else if (trimmed.startsWith("hsl(") || trimmed.startsWith("hsla(")) {
      return RgbColor.#parseCssHslFunction(trimmed);
    }
  }
  throw new TypeError("cssString");
}

static #parseCssHslFunction(cssString: string): RgbColor {
  void cssString;
  throw new Error("not implemented");
}
*/
// }

  export const CssFunction = {
    LEGACY_HSL: "legacy-hsl",
    L4_HSL: "l4-hsl",
    // XXX lab, lch, ...
  } as const;
  export type CssFunction = typeof CssFunction[keyof typeof CssFunction];

  export type CssOptions = {
    omitAlpha?: OmitAlpha;
    type?: CssNotation;
  };



    //XXX
  // xxxHsl(func): Iterable<hsl>
  // xxxRgb(func): Iterable<rgb>

  //XXX complementaryColor() 補色を返す

  // lighter(percentage): SRgbColor {
  // }

  // darker(percentage): SRgbColor {
  // }

  // contrast,saturate,sepia,...

  // grayscale(): SRgbColor {
  // }

  // invert(): SRgbColor {
  // }

  //XXX
  // equals(rgb: Rgb | SRgbColor): boolean {
  //   if (rgb instanceof SRgbColor) {
  //     return (this.red === rgb.red) && (this.green === rgb.green) && (this.blue === rgb.blue) && (this.alpha === rgb.alpha);
  //   }
  //   else  {

  //   }
  // }

  //XXX bytesEquals

  //XXX mix(blendMode, other: SRgbColor | *)